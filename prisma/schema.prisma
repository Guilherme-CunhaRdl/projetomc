// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menucategories MenuCategory[] //Isso não é salvo no banco de dados, sevira apenas para o prisma
  products       Products[] //Isso não é salvo no banco de dados, sevira apenas para o prisma
  orders         Order[]
  createdAt      DateTime       @default(now()) //O prisma Atualiza isso sozinho
  updatedAt      DateTime       @updatedAt //Esse tambem atualiza sozinho
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id]) //Para criar a relação entre as tabelas precisa colocar um campo que referencia a outra tabela o campo de referencia sera uma lista de ids
  products     Products[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Products {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  menucategory   MenuCategory   @relation(fields: [menucategoryId], references: [id])
  menucategoryId String
  orders         OrderProduct[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Order {
  id                 Int               @id @default(autoincrement())
  total              Float
  status             OrderStatus
  consumptionsMethod ConsumptionMethod
  restaurantId       String
  restaurant         Restaurant        @relation(fields: [restaurantId], references: [id])
  orderProducts      OrderProduct[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  product   Products @relation(fields: [productId], references: [id])
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Enums são tipos de dados que contem um conjunto de valores pré-definidos que não podem ser alterados tem uma utilidade parecida com as constantes
//ESSA IA DO GIT E MUITO LOUCA KKKKKKK
enum OrderStatus {
  PENDING //Pendente
  IN_PREPARATION //Em preparação
  FINISHED //Finalizado
}

enum ConsumptionMethod {
  TAKEAWAY //Pegar
  DINE_IN //Comer no local
}
